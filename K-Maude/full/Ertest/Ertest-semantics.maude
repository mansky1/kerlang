load Ertest-configuration

(k semantics for Ertest is including GENERIC-EXP-SEMANTICS .
  var PR : Prgm . vars M N : Name . vars V V' VH VT : KResult . var VL : List{KResult} .
  var G : Env{K} . var I : Nat .
  vars P E E' H T D : K .

  kconf <T> 
          <k> _ </k> <env> _ </env> <current> _ </current> 
          <modules> 
            <module*> <name> _ </name> <funs> _ </funs> </module*> 
          </modules>
        </T> .

  op run : Prgm -> Config .
  eq run(PR) = <T> <k> mkK(PR) </k> <env> .empty </env> <current> name(x) </current> <modules> .empty </modules> </T> .

--- Erlang values
  keq <k> [[[] ==> #[]]] ...</k> .
  keq <k> [[[V | V'] ==> #[V | V']]] ...</k> .

  keq <k> [[{} ==> #{}]] ...</k> .
  keq <k> [[{~}(VL) ==> #({~}(VL))]] ...</k> .

--- expressions
  keq <k> [[N ==> V]] ...</k> <env>... N |-> V ...</env> .

--- built-in functions
  keq <k> [[element(# 1, #({~}(V,VL))) ==> V]] ...</k> .
  keq <k> [[element(#(s s I), #({~}(V,VL))) ==> element(#(s I), #({~}(VL)))]] ...</k> .

  keq <k> [[tuple-size(#{}) ==> # 0]] ...</k> .
  keq <k> [[tuple-size(#{~}(VL)) ==> #(length VL)]] ...</k> .

  keq <k> [[length(#[V | V']) ==> length(V') + # 1]] ...</k> .
  keq <k> [[length(#[]) ==> # 0]] ...</k> .

--- functions
  keq <k> [[(N(P)=> E) ==> .K]] ...</k> <current> M </current> <name> M </name> <funs> [[G ==> G[N <- < P , E >] ]] </funs> .
  keq <k> [[@.(.nil) ==> .K]] ...</k> .
  keq <k> [[N(V) ==> match(P,V) -> E -> restore(G)]] ...</k> <funs>... N |-> < P, E > ...</funs> <env> [[G ==> .empty]] </env> .

--- modules
  keq <k> [[-module(N). D ==> D]] ...</k> <current> [[_ ==> N]] </current> 
      <modules> [[.empty ==> <module> <name> N </name> <funs> .empty </funs> </module>]] ...</modules> .

--- matching
  keq <k> [[P = V ==> match(P,V) -> V]] ...</k> .

  kceq <k> [[match(N,V) ==> .K]] ...</k> <env> [[G ==> G[N <- V]]] </env> if $hasMapping(G, N) = false .
  keq <k> [[match(N,V) ==> .K]] ...</k> <env>... N |-> V ...</env> .
  keq <k> [[match([H | T],#[VH | VT]) ==> match(H, VH) -> match(T, VT)]] ...</k> .
  keq <k> [[match(V, V) ==> .K]] ...</k> .

  keq <k> [[V . ==> .K]] ...</k> .
k)
